#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# pylint: disable=W1203
#pylint: disable-msg=e0401
#pylint: disable-msg=c0413

'''
    ICE Gauntlet Remote Game
'''

import sys
import atexit
import argparse
import Ice
Ice.loadSlice('Icegauntlet.ice')
import IceGauntlet

import game
import game.common
import game.screens
import game.pyxeltools
import game.orchestration


EXIT_OK = 0
BAD_COMMAND_LINE = 1

DEFAULT_ROOM = 'tutorial.json'
DEFAULT_HERO = game.common.HEROES[0]


class RemoteDungeonMap(Ice.Application):

    '''
    Ice Gauntlet Remote Game
    '''

    def __init__(self,hero):
        self.hero = hero
        self.mapa = None
        self.mapasjugados = [self.mapa]
        self.gameservice = None
        self.proxy = None

    def run(self,argv):
        self.proxy = self.communicator().stringToProxy(argv[1])
        self.gameservice = IceGauntlet.DungeonPrx.checkedCast(self.proxy)
        if not self.gameservice:
            raise RuntimeError('Invalid proxy')
        gauntlet = game.Game(self.hero, self)
        game.pyxeltools.initialize()
        gauntlet.add_state(game.screens.TileScreen, game.common.INITIAL_SCREEN)
        gauntlet.add_state(game.screens.StatsScreen, game.common.STATUS_SCREEN)
        gauntlet.add_state(game.screens.GameScreen, game.common.GAME_SCREEN)
        gauntlet.add_state(game.screens.GameOverScreen, game.common.GAME_OVER_SCREEN)
        gauntlet.add_state(game.screens.GoodEndScreen, game.common.GOOD_END_SCREEN)
        gauntlet.start()

    @property
    def next_room(self):
        '''get next room from DB for play it'''
        try:
            timeout = 0
            while self.mapa in self.mapasjugados and timeout < 30:
                self.mapa = self.gameservice.getRoom()
                if self.mapa not in self.mapasjugados:
                    self.mapasjugados.append(self.mapa)
                    break
                timeout += 1

            if timeout >= 30:
                sys.exit()
                #bye()
            return self.mapa

        except IceGauntlet.RoomNotExists:
            print('Not more rooms')
    @property
    def finished(self):
        '''check if all maps were already played'''
        return not self.mapa

@atexit.register
# pylint: disable=W0613
def bye(*args, **kwargs):
    '''Exit callback, use for shoutdown'''
    print('Thanks for playing!')
# pylint: enable=W0613

def parse_commandline():
    '''Parse and check commandline'''
    parser = argparse.ArgumentParser('IceDungeon Local Game')
    #parser.add_argument('LEVEL', nargs='+', default=[DEFAULT_ROOM], help='List of levels')
    parser.add_argument('PROXY',nargs='+', default=None,help='Proxy GameServer')
    parser.add_argument(
        '-p', '--player', default=DEFAULT_HERO, choices=game.common.HEROES,
        dest='hero', help='Hero to play with'
    )
    options = parser.parse_args()

    #for level_file in options.LEVEL:
    #    if not game.assets.search(level_file):
    #        logging.error(f'Level "{level_file}" not found!')
    #        return None
    return options

def main(argv):
    '''Start game according to commandline'''
    user_options = parse_commandline()
    if not user_options:
        return BAD_COMMAND_LINE
    #dungeon = game.DungeonMap(user_options.LEVEL)
    dungeon = RemoteDungeonMap(user_options.hero)
    dungeon.main(sys.argv)
    #gauntlet = game.Game(user_options.hero, dungeon)
    #game.pyxeltools.initialize()

    return EXIT_OK


if __name__ == '__main__':
    sys.exit(main(sys.argv))
