#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#pylint: disable-msg=e0401
#pylint: disable-msg=c0413

'''
Script that runs the server
'''

import sys
import json
import os.path
import logging
import signal
import random
import Ice
Ice.loadSlice('Icegauntlet.ice')
import IceGauntlet
import icegauntlettool

ROOMS_FILE = 'rooms.json'

class RoomServiceI(IceGauntlet.RoomManager):

    '''
    pass proxy authentication for parameter from run
    '''
    def __init__(self,authentication):
        self._rooms_ = {}
        self.authentication = authentication
        if os.path.exists(ROOMS_FILE):
            self.refresh()
        else:
            self.__commit__()

    def refresh(self):
        '''
        maps update
        '''
        logging.debug('Reloading user database')
        with open(ROOMS_FILE,'r') as contents:
            self._rooms_ = json.load(contents)

    def __commit__(self):
        logging.debug('Room database updated!')
        with open(ROOMS_FILE,'w') as contents:
            json.dump(self._rooms_, contents, indent=4, sort_keys=True)

    def room_name_exists(self,name):
        '''
        check if the room name already exits, its not allowed to have two rooms with same name
        '''
        for room in self._rooms_:
            if name == room:
                return True
        return False

    def roomdataexists(self,data):
        '''
        check if the room data already exits, its not allowed to have two equal maps
        '''
        for room in self._rooms_:
            if data == self._rooms_[room]['data']:
                return True
        return False

    def publish(self, token, room_data, current=None):
        '''check if user exists'''
        owner = self.authentication.getOwner(token)
        if owner not None:
            contain = json.loads(room_data)
            if not contain['room'] and not contain['data']:
                raise IceGauntlet.WrongRoomFormat()
            nombre = contain['room']
            data = {
                'token': token,
                'data': contain['data']
            }

            if self.room_name_exists(nombre):
                raise IceGauntlet.RoomAlreadyExists()
            else:
                self._rooms_[nombre] = data
                self.__commit__()

        else:
            raise IceGauntlet.Unauthorized()

    def remove(self, token, room_name, current=None):
        ''''check if user exists'''
        owner = self.authentication.getOwner(token)
        if owner:
            #contain = json.loads(room_data)
            if self.room_name_exists(room_name):
                if self.authentication.getOwner(self._rooms_[room_name]['token']) == owner:
                    del self._rooms_[room_name]
                    self.__commit__()
                else:
                    raise IceGauntlet.Unauthorized()
            else:
                raise IceGauntlet.RoomNotExists()

        else:
            raise IceGauntlet.Unauthorized()

class GameI(IceGauntlet.Dungeon):

    '''
    service of the server for implement interface Dungeon from Icegauntlet.ice
    '''

    def __init__(self):
        # Creamos el objeto dungeonArea
        self.dungeonarea = DungeonArea()
        #self._rooms_ = []
        # CREAMOS LA FACTORIA DE OBJETOS DUNGEONAREA
        #for i in range(5):
        #    rooms.add(DungeonArea())
        #if os.path.exists(ROOMS_FILE):
        #    self.refresh()

    """def refresh(self):
        '''
        refresh the rooms of the DB
        '''
        #logging.debug('Reloading user database')
        with open(ROOMS_FILE,'r') as contents:
            self._rooms_ = json.load(contents)
    """
    """
    def getRoom(self,current=None):
        '''
        get a room from the DB
        '''
        map = {}
        if len(self._rooms_) == 0:
            raise IceGauntlet.RoomNotExists()
        lab = random.choice(list(self._rooms_.keys()))
        map['data'] = self._rooms_[lab]['data']
        map['room'] = lab
        #i = 0
        #for room in data:
        #    if i == lab:
        #        map['data'] = data[room]['data']
        #        map['room'] = room
        #    else:
        #        i+=1
        return json.dumps(map)
    """
    def getEntrance(self, current=None):
        return self.dungeonarea

class DungeonArea(IceGauntlet.DungeonArea):
    def __init__(self):
        self.DungeonArea = DungeonArea()
        self._rooms_ = {}
        if os.path.exists(ROOMS_FILE):
            self.refresh()

    def refresh(self):
        '''
        refresh the rooms of the DB
        '''
        #logging.debug('Reloading user database')
        with open(ROOMS_FILE,'r') as contents:
            self._rooms_ = json.load(contents)

    def getEventChannel(self, current=None):

    def getMap(self,current=None):
        map = {}
        if len(self._rooms_) == 0:
            raise IceGauntlet.RoomNotExists()
        lab = random.choice(list(self._rooms_.keys()))
        map['data'] = self._rooms_[lab]['data']
        map['room'] = lab
        return json.dumps(map)

    def getActors(self, current=None):

    def getItems(self, current=None):

    def getNextArea(self):
        return self.DungeonArea

class DungeonAreaSync(IceGauntlet.DungeonAreaSync):
    def __init__():

    def fireEvent(self,event,senderId,current=None):



class Server(Ice.Application):
    '''
    Authentication Server
    '''
    def run(self, argv):
        '''
        Server loop
        '''
        logging.debug('Initializing server...')
        #check authentication proxy
        proxyauth = self.communicator().stringToProxy(argv[1])
        authentication = IceGauntlet.AuthenticationPrx.checkedCast(proxyauth)
        if not authentication:
            raise RuntimeError('Invalid proxy')

        servant = RoomServiceI(authentication)
        signal.signal(signal.SIGUSR1, servant.refresh)

        adapter = self.communicator().createObjectAdapter('ServiceAdapter')
        room_service_identity = self.communicator().stringToIdentity('RoomManager')
        adapter.add(servant,room_service_identity)
        proxy = adapter.createProxy(room_service_identity)
        servant_game = GameI()
        game_identity = self.communicator().stringToIdentity('Dungeon')
        adapter.add(servant_game,game_identity)
        proxygame = adapter.createProxy(game_identity)
        adapter.activate()
        logging.debug('AdapterGame ready, servant proxy: {}'.format(proxy))
        print('"{}"'.format(proxy), flush=True)
        print('"{}"'.format(proxygame), flush=True)

        logging.debug('Entering server loop...')
        self.shutdownOnInterrupt()
        self.communicator().waitForShutdown()

        return 0


if __name__ == '__main__':

    if len(sys.argv) != 3:
        print("usage: ./Server.py <proxy>")
        sys.exit(0)

    app = Server()
    sys.exit(app.main(sys.argv))
